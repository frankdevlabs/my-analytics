name: CI - Continuous Integration

on:
  push:
    branches: ["**"]  # Run on all branches
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

# Prevent multiple workflows from running simultaneously
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.10.0
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

  # Tests temporarily disabled - require database setup in CI
  # TODO: Re-enable tests after adding database/Redis services to CI pipeline
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./app
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js 20.10.0
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.10.0'
  #         cache: 'npm'
  #         cache-dependency-path: 'app/package-lock.json'
  #
  #     - name: Install dependencies
  #       run: npm ci --legacy-peer-deps
  #
  #     - name: Run tests
  #       # Tests run but don't fail the pipeline (as requested)
  #       continue-on-error: true
  #       run: npm test -- --coverage --maxWorkers=2
  #
  #     - name: Upload coverage report
  #       if: always()
  #       continue-on-error: true
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: app/coverage
  #         retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.10.0
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      # Restore Next.js cache for faster builds
      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            app/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('app/package-lock.json') }}-${{ hashFiles('app/**/*.js', 'app/**/*.jsx', 'app/**/*.ts', 'app/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('app/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build tracker script
        run: npm run build:tracker

      - name: Build Next.js application
        env:
          # Environment variables required for Next.js build
          # These are dummy values for build-time validation only (not used for actual connections)
          NODE_ENV: production
          DATABASE_URL: postgresql://ci:ci@localhost:5432/ci_build
          REDIS_URL: redis://localhost:6379
          AUTH_SECRET: ci-build-secret-key-for-validation-only-min-32-chars
          AUTH_URL: http://localhost:3000
          ALLOWED_ORIGINS: http://localhost:3000
        run: npm run build

      - name: Verify build output
        run: |
          echo "Verifying build artifacts..."
          test -d .next || (echo "Error: .next directory not found" && exit 1)
          test -f public/fb-a7k2.js || (echo "Error: Tracker script not built" && exit 1)
          echo "✓ Build verification passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            app/.next
            app/public/fb-a7k2.js
          retention-days: 3

  # Summary job that runs after all jobs complete
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, build]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          echo "CI Results:"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Build: ${{ needs.build.result }}"

          # Fail if lint or build failed
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Lint failed"
            exit 1
          fi

          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed"
            exit 1
          fi

          echo "✅ CI passed!"
